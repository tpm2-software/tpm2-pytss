from typing import Optional, Callable, Iterable, Any, Dict, Tuple, Union

error: type[Exception]
class CData:
    def __getitem__(self, index: int | slice) -> Any: ...
    def __setitem__(self, index: int | slice, value: "CData" | Callable[..., int] | int) -> None: ...
    def __bytes__(self) -> bytes: ...
    def __setattr__(self, key: str, value: "CData" | Any) -> None: ...
    def __getattr__(self, key: str) -> "CData": ...
    __call__: Callable[..., Any]

class CType:
    kind: str
    cname: str
    item: "CType"
    fields: Iterable[Tuple[str, Any]]

NULL: CData
def gc(cdata: CData, destructor: Callable[[CData], None], size: int = 0)-> CData: ...
def typeof(cdata: CData | str) -> CType: ...
def new(cdecl: str, init: Any = None) -> CData: ... 
def string(cdata: CData, maxlen: Optional[int] = None) -> bytes: ...
def sizeof(cdata: CData | str) -> int: ...
def def_extern() -> Callable[..., int | None]: ...
def buffer(cdata: CData, size: Optional[int]) -> Any: ...
def from_buffer(python_buffer: Any, require_writable: bool = False) -> CData: ...
def from_handle(handle: CData) -> Any: ...
def new_handle(python_object: Any) -> CData: ...
def cast(ctype: str, value: CData) -> CData: ...
def memmove(dest: CData | bytes, src: CData | bytes, n: int) -> None: ...
def addressof(cdata: CData, *fields_or_indexes: str | int) -> CData: ...
def unpack(cdata: CData, maxlen: Optional[int]) -> bytes: ...
def new_allocator(**kwargs: Any) -> Callable[[str, Optional[Callable[[CData], CData] | bytes | int]], CData]: ...
